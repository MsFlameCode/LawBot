from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

import keyboard
import const

bot = Bot(token='5585276962:AAF6VGoA04eA_gzmNiy-oaxEvrZfGKOVa5s')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id, const.CONST_GREETINGS, reply_markup=keyboard.create_keyboard_topic())


@dp.message_handler(lambda message: message.text == "üìò—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞")
async def process_start_command(message: types.Message):
    msg = "–ö –∫–∞–∫–æ–π —Ç–µ–º–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_inline_board_service(),
                           disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_ser'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    code2 = callback_query.data[-2]
    if code.isdigit():
        code = int(code)
        if code2.isdigit():
            code2 = int(code2)
            code = code2 * 10 + code
    if code == 1:
        const.CONST_TOPIC = "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å / –∑–µ–º–µ–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ"
    elif code == 2:
        const.CONST_TOPIC = "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ / —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å"
    elif code == 3:
        const.CONST_TOPIC = "–Ω–∞–ª–æ–≥–æ–≤–æ–µ"
    elif code == 4:
        const.CONST_TOPIC = "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"
    elif code == 5:
        const.CONST_TOPIC = "–∫—Ä–µ–¥–∏—Ç—ã / –∑–∞–π–º—ã"
    elif code == 6:
        const.CONST_TOPIC = "—Å–µ–º–µ–π–Ω–æ–µ"
    elif code == 7:
        const.CONST_TOPIC = "—Ç—Ä—É–¥–æ–≤–æ–µ"
    elif code == 8:
        const.CONST_TOPIC = "–∂–∏–ª–∏—â–Ω–æ–µ"
    elif code == 9:
        const.CONST_TOPIC = "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ"
    elif code == 10:
        const.CONST_TOPIC = "–ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–µ"
    elif code == 11:
        const.CONST_TOPIC = "–ñ–ö–•"
    elif code == 12:
        const.CONST_TOPIC = "–º–µ–¥–∏—Ü–∏–Ω–∞"
    elif code == 13:
        const.CONST_TOPIC = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ"
    elif code == 14:
        const.CONST_TOPIC = "—É–≥–æ–ª–æ–≤–Ω–æ–µ"
    elif code == 15:
        const.CONST_TOPIC = "–∏—Å–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω–æ–µ"
    elif code == 16:
        const.CONST_TOPIC = "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
    elif code == 17:
        const.CONST_TOPIC = "–î–¢–ü"
    elif code == 18:
        const.CONST_TOPIC = "–≤–æ–∏–Ω—Å–∫–∏–π —É—á–µ—Ç"
    elif code == 19:
        const.CONST_TOPIC = "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ / –≤–∏–∑—ã"
    elif code == 20:
        const.CONST_TOPIC = "—Å—É–¥–µ–±–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"
    elif code == 21:
        const.CONST_TOPIC = "–∏–Ω–æ–µ"
    else:
        const.CONST_TOPIC = "-"
    msg = "–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: %s" % const.CONST_TOPIC
    await bot.answer_callback_query(callback_query.id)
    if code == 1:
        await bot.send_message(callback_query.from_user.id, msg, reply_markup=keyboard.create_keyboard_for_real_estate())
    else:
        await bot.send_message(callback_query.from_user.id, msg, reply_markup=keyboard.create_keyboard_service())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª—É–≥–∏
@dp.message_handler(lambda message: message.text == "üìò–∫–∞–∫–∞—è —É—Å–ª—É–≥–∞ –Ω—É–∂–Ω–∞")
async def process_start_command(message: types.Message):
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:"
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_inline_board_service_type(),
                           disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_type'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    code2 = callback_query.data[-2]
    if code.isdigit():
        code = int(code)
        if code2.isdigit():
            code2 = int(code2)
            code = code2 * 10 + code
    if code == 1:
        const.CONST_SER = "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    elif code == 2:
        const.CONST_SER = "—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    elif code == 3:
        const.CONST_SER = "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å—É–¥–µ"
    elif code == 4:
        const.CONST_SER = "'—Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä"
    elif code == 5:
        const.CONST_SER = "—É–∑–∞–∫–æ–Ω–∏—Ç—å/—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É"
    elif code == 6:
        const.CONST_SER = "–ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
    elif code == 7:
        const.CONST_SER = "—É–º–µ–Ω—å—à–∏—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞/–∑–µ–º–ª–∏"
    elif code == 8:
        const.CONST_SER = "—É—á–∞—Å—Ç–∏–µ —é—Ä–∏—Å—Ç–∞/—ç–∫—Å–ø–µ—Ä—Ç–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞"
    elif code == 9:
        const.CONST_SER = "–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é –∫ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫—É  –æ –Ω–µ—É—Å—Ç–æ–π–∫–µ"
    elif code == 10:
        const.CONST_SER = "—É—á–∞—Å—Ç–∏–µ —é—Ä–∏—Å—Ç–∞/—ç–∫—Å–ø–µ—Ä—Ç–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞"
    else:
        const.CONST_SER = "-"
    msg = "–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: %s" % const.CONST_SER
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, msg, reply_markup=keyboard.create_keyboard_loc())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(lambda message: message.text == "üìò–º–µ—Å—Ç–æ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏")
async def process_start_command(message: types.Message):
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_inline_board_service_loc(),
                           disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_loc'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    code2 = callback_query.data[-2]
    if code.isdigit():
        code = int(code)
        if code2.isdigit():
            code2 = int(code2)
            code = code2 * 10 + code
    if code == 1:
        const.CONST_LOC = "–¢—é–º–µ–Ω—å"
    elif code == 2:
        const.CONST_LOC = "–¢–æ–±–æ–ª—å—Å–∫"
    elif code == 3:
        const.CONST_LOC = "–ò—à–∏–º"
    elif code == 4:
        const.CONST_LOC = "–Ø–ª—É—Ç–æ—Ä–æ–≤—Å–∫"
    elif code == 5:
        const.CONST_LOC = "–ó–∞–≤–æ–¥–æ—É–∫–æ–≤—Å–∫"
    elif code == 6:
        const.CONST_LOC = "–°—É—Ä–≥—É—Ç"
    elif code == 7:
        const.CONST_LOC = "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫"
    elif code == 8:
        const.CONST_LOC = "–∏–Ω–æ–π –≥–æ—Ä–æ–¥/–ø–æ—Å–µ–ª–æ–∫"
    else:
        const.CONST_LOC = "-"
    msg = "–í—ã–±—Ä–∞–Ω –Ω–∞—Å–µ–ª–Ω–Ω—ã–π –ø—É–Ω–∫—Ç %s: " % const.CONST_LOC
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, msg, reply_markup=keyboard.create_keyboard_write())


@dp.message_handler(lambda message: message.text == "üìò–∑–∞–ø–∏—Å—å –∫ —é—Ä–∏—Å—Ç—É/—ç–∫—Å–ø–µ—Ä—Ç—É")
async def process_start_command(message: types.Message):
    if len(const.INPUT_DATA) == 0 and len(const.CONST_TOPIC) != 0 and len(const.CONST_SER) != 0 and \
            len(const.CONST_LOC) != 0:
        msg = "–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞: %s \n –¢–∏–ø —É—Å–ª—É–≥–∏: %s \n –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: %s" % (const.CONST_TOPIC, const.CONST_SER,
                                                                                  const.CONST_LOC)
        await bot.send_message(const.CONST_ID, msg, reply_markup=keyboard.create_keyboard_topic())
    else:
        if len(const.INPUT_DATA) != 0:
            msg = "–í–∞—à –∑–∞–ø—Ä–æ—Å: %s" % const.INPUT_DATA
            await bot.send_message(const.CONST_ID, msg, reply_markup=keyboard.create_keyboard_topic())
        else:
            await bot.send_message(const.CONST_ID, "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞, —Ñ–æ—Ä–º–∞—Ç —É—Å–ª—É–≥–∏ –∏ \
                                                                                          –≥–æ—Ä–æ–¥ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏")
    msg = "–°–ø–∞—Å–∏–±–æ, –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —é—Ä–∏—Å—Ç–∞/—ç–∫—Å–ø–µ—Ä—Ç–∞ —É–∑–∫–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è " \
          "–í–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω. –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏ –í–∞–º —É–¥–æ–±–Ω–æ? –ö–∞–∫ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å?"
    await bot.send_message(message.from_user.id, msg, reply_markup=keyboard.create_keyboard_topic(),
                           disable_web_page_preview=True)
    const.INPUT_DATA = ""


@dp.message_handler()
async def echo_message(message: types.Message):
    const.INPUT_DATA = message.text
    msg = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \" üìò–∑–∞–ø–∏—Å—å –∫ —é—Ä–∏—Å—Ç—É/—ç–∫—Å–ø–µ—Ä—Ç—É \" "
    await bot.send_message(message.chat.id, msg, reply_markup=keyboard.create_keyboard_topic())

if __name__ == '__main__':
    executor.start_polling(dp)
